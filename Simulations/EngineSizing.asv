CombustionPressure = 300 * 6894.76; %PA
AmbientPressure = 14.6959 * 6894.76; %PA Standard atmosphere
CombustionGamma = 1.2;

ExitMach = sqrt( 2/(CombustionGamma-1) * ( (CombustionPressure./AmbientPressure).^((CombustionGamma-1)/CombustionGamma) - 1 ) );
AreaRatio = (1./ExitMach) .* ((2./(CombustionGamma+1)) .* (1 + (CombustionGamma-1)./2 .* ExitMach.^2)) .^ ((CombustionGamma+1)./(2*(CombustionGamma-1)));

Thrust = 250 * 4.44822; %Thrust, Newtons
OFRatio = 5;

cea = readCEA('rocketN2OxIPA.txt');
Mexit = ceaInterp(cea, 'Mach_e', 'O_F', OFRatio);
Aexit = ceaInterp(cea, 'a_e', 'O_F', OFRatio);
Cstar = ceaInterp(cea, 'Cstar', 'O_F', OFRatio);
Vexit = Mexit * Aexit;
CEAreaRatio= ceaInterp(cea, 'Ae_At', 'O_F', OFRatio);
Mflow = Thrust/Vexit; %kg/s

ThroatArea = Mflow * Cstar / CombustionPressure; %m^2
ThroatRadius = sqrt(ThroatArea/pi); %m
ExitArea = CEAreaRatio * (ThroatArea);
ThroatRadiusIN = ThroatRadius * 39.3701;
ExitRadius = sqrt(ExitArea/pi);
ExitRadiusIN = ExitRadius * 39.3701;

NozzleLengthIN = 1.8;

ChamberLengthIN = 3;
ChamberRadiusIN = 1;
Lstar = (ChamberLengthIN * ChamberRadiusIN^2 * pi)/(ThroatRadiusIN^2 * pi);

simDx = 0.01;

x = 0:simDx:(ChamberLengthIN + NozzleLengthIN);
fillets = 0.5; %in
[stationrad, stationarea] = combustionChamberProfile(x, ChamberRadiusIN, fillets, 45, fillets, ThroatRadiusIN, ChamberLengthIN, 15, ExitRadiusIN,3, NozzleLengthIN);

Tcombustion = ceaInterp(cea, 'T_c', 'O_F', OFRatio);
gamma_e = ceaInterp(cea, 'gamma_e', 'O_F', OFRatio);
Machcurve = machFromArea(stationrad, gamma_e, ThroatRadiusIN);          % supersonic

T    = Tcombustion ./ (1 + (gamma_e-1)/2 .* Machcurve.^2);
P = CombustionPressure .* (1 + (gamma_e-1).*0.5 .* Machcurve.^2).^(-1*gamma_e./(gamma_e-1));

% Target mass flow for oxidizer and fuel
mdotF = Mflow/(1+OFRatio) 
mdotO = Mflow - mdotF


% bulk-gas properties at this O/F (CEA exit columns are close enough)
cp0  = ceaInterp(cea,'Cp','O_F',OFRatio);      % J/(kg·K)
Pr0  = ceaInterp(cea,'Pr','O_F',OFRatio);      % –
T0   = Tcombustion;                            % K (stagnation)

combustioncea = parseCEAtransport("2transportN2OxIPA.txt", 'true');

h = @(Thw, i) bartz(P(i), T(i), Machcurve(i), stationarea(i).*0.00064516, ThroatArea, fillets*0.0254, OFRatio, Thw, Cstar, combustioncea);

%hg(Taw - Twg) = q = (k/t) * (Twg - Twc) = hc * (Twc - Tco)


Ncc = 30; %number of coolant channels
Agas = (2*pi*stationrad.*0.0254.*simDx.*0.0254)/Ncc;

Taw = T.*0.98;


wallthickness = 0.01; %in
hcoolant = 10*10^3 %W/M^2K
height = 0.05; %in
width = 0.1; %in
k = 237;
finwidth = 0.025; %in
Lc = height*0.0254 + (0.5 * finwidth*0.0254)/2;
m = sqrt(2*(hcoolant)/(k * 0.5 * finwidth*0.0254));
nfn = tanh(m*Lc)/(m*Lc);

Acoolant = (2*nfn*height*0.0254 + width*0.0254)*simDx*0.0254;

qCoolant = @(Tcw, Tbulkcoolant) hcoolant.*Acoolant.*(Tcw - Tbulkcoolant);

qWall = @(Thw, Tcw, i) k.*Agas(i).*(Thw -Tcw)./(wallthickness.*0.0254);

qGas = @(Thw, i) h(Thw, i).*Agas(i).*(Taw(i)-Thw);

Tcoolantinit = 300; %Initial Coolant temperature, K


N   = length(stationrad);          % total axial cells

% --- pre‑allocate result vectors (faster & avoids confusing zeros) ------
Tcw          = zeros(1,N);         % cold‑wall temperature
Thw          = zeros(1,N);         % hot‑wall temperature
q            = zeros(1,N);         % gas‑side heat flux
he           = zeros(1,N);         % Bartz hg
deltaT       = zeros(1,N);         % coolant ΔT per cell

Tbulkcoolant = zeros(1,N+1);       % bulk coolant temp at cell nodes
Tbulkcoolant(end) = Tcoolantinit;  % *** inlet is NOW at the NOZZLE exit ***
opts = optimset('Display','off');
cpIPA = 2600;

Ripa = 8.3144598/60.0950 * 10^3 %J/kg K
for i = N:-1:1                         % *** march from nozzle → chamber ***
    
    bulkIn = Tbulkcoolant(i+1);       % coolant entering this cell (downstream)

    % --- FSOLVE for wall / coolant interface temps ---------------------
    f  = @(x) [ ...
        qCoolant(x(1), bulkIn) - qGas(x(2), i) ; ...
        qCoolant(x(1), bulkIn) - qWall(x(2), x(1), i) ];

    x0 = [bulkIn ;  T(i)];            % initial guess
    var= fsolve(f, x0, opts);         % var(1)=Tcw , var(2)=Thw

    % --- store results --------------------------------------------------
    Tcw(i) = var(1);
    Thw(i) = var(2);
    he(i)  = h(var(2), i);

    q(i)       = qGas(Thw(i), i);
    deltaT(i)  = q(i) / ((mdotF/Ncc) * cpIPA);

    % coolant leaving this cell (upstream) becomes bulkIn for next i‑1
    Tbulkcoolant(i) = bulkIn + deltaT(i);
    if(ipa(2.068e+6, Tbulkcoolant(end)) == "VAPOR")
        disp("WARNING VAPOR IN COOOLANT LINES")
    end
end


subplot(2,2,1)
plot(Thw)
hold on
plot(Tcw)
plot(Tbulkcoolant)
plot(T)
plot(Taw)
legend("Hot Wall", "Cold Wall", "Coolant", "Combustion Temp", "Adiabatic Wall Temp")
hold off
subplot(2,2,2)
plot(Thw'-Taw)
ylabel("Temperature Difference Between Taw and Thw")
subplot(2,2,3)
plot(he*10^-3)
ylabel("Bartz Heat Transfer Coeff. (kW/m^2K")
subplot(2,2, 4)
plot(x, stationrad)
hold on
plot(x, -stationrad)
hold off
axis equal